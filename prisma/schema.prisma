// running Prisma after modifying the schema
// - Generate client after editing schema(schema.prisma) = npx prisma generate // or npx prisma generate --schema=./prisma/schema.prisma
// - Migration = npx prisma migrate dev --name add_user_based_tables
// - Run migration = npx prisma migrate dev 
// - Reset database = npx prisma migrate reset
// - Seed database = npx tsx ./db/seed
// - Prisma studio = npx prisma studio

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String      @unique(map: "product_slug_index")
  category    String
  images      String[]
  brand       String
  description String
  purchased   Int
  stock       Int
  price       Decimal     @db.Decimal(10, 2)
  rating      Decimal     @db.Decimal(3, 2)
  numReviews  Int         @default(0)
  isFeatured  Boolean     @default(false)
  banner      String?
  createdAt   DateTime    @default(now()) @db.Timestamp(6)
  OrderItem   OrderItem[]
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_index")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  password      String?
  role          String    @default("user")
  address       Json?     @db.Json
  paymentMethod String?
  account       Account[]
  session       Session[]
  cart          Cart[]
  order         Order[]
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  token     String   @id
  userId    String   @db.Uuid
  expires   DateTime @db.Timestamp(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Cart Model
model Cart {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String?  @db.Uuid
  sessionCartId String
  items         Json[]   @default([]) @db.Json
  itemsPrice    Decimal  @db.Decimal(12, 2)
  totalPrice    Decimal  @db.Decimal(12, 2)
  shippingPrice Decimal  @db.Decimal(12, 2)
  taxPrice      Decimal  @db.Decimal(12, 2)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime @updatedAt
  order         Order[]
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String      @db.Uuid
  cartId          String      @db.Uuid
  shippingAddress Json        @db.Json
  paymentMethod   String
  paymentResult   Json?       @db.Json
  itemsPrice      Decimal     @db.Decimal(12, 2)
  shippingPrice   Decimal     @db.Decimal(12, 2)
  taxPrice        Decimal     @db.Decimal(12, 2)
  totalPrice      Decimal     @db.Decimal(12, 2)
  isPaid          Boolean     @default(false)
  paidAt          DateTime?   @db.Timestamp(6)
  isDelivered     Boolean     @default(false)
  deliveredAt     DateTime?
  createdAt       DateTime    @default(now()) @db.Timestamp(6)
  updatedAt       DateTime    @updatedAt
  OrderItem       OrderItem[]
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  cart            Cart        @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model OrderItem {
  orderId   String   @db.Uuid
  productId String   @db.Uuid
  name      String
  qty       Int
  price     Decimal  @db.Decimal(12, 2)
  slug      String
  image     String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId], map: "orderitems_orderId_productId_pk")
}
